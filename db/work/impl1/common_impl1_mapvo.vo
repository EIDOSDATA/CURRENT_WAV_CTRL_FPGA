
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.12.1.454

// ldbanno -n Verilog -o common_impl1_mapvo.vo -w -neg -gui -msgset C:/Users/eidos/GitHub/CURRENT_WAV_CTRL_FPGA/db/work/promote.xml common_impl1_map.ncd 
// Netlist created on Mon Aug 22 11:58:06 2022
// Netlist written on Mon Aug 22 11:58:07 2022
// Design is for device LCMXO2-2000ZE
// Design is for package TQFP100
// Design is for performance grade 1

`timescale 1 ns / 1 ps

module ci_stim_fpga_wrapper ( i_rst_n, i_start_btn, i_stop_btn, i_duty, i_idle, 
                              o_ano_top, o_ano_bot, o_cat_top, o_cat_bot, 
                              o_curr_ena, o_led_r, o_led_g, o_led_b );
  input  i_rst_n, i_start_btn, i_stop_btn;
  input  [2:0] i_duty;
  input  [2:0] i_idle;
  output o_ano_top, o_ano_bot, o_cat_top, o_cat_bot, o_curr_ena, o_led_r, 
         o_led_g, o_led_b;
  wire   \r_interphase_cnt[0] , r_interphase_cnt, \r_interphase_cnt_s[0] , 
         r_interphase_cnte, w_clk, \r_interphase_cnt_cry[0] , \r_idle_cnt[23] , 
         \r_idle_cnt[22] , \w_idle_tmout_0_data_tmp[10] , 
         \w_idle_tmout_0_data_tmp_i[11] , \r_idle_cnt[21] , \r_idle_cnt[20] , 
         \r_idle[0] , \r_idle_cnt[18] , \r_idle_cnt[19] , 
         \w_idle_tmout_0_data_tmp[8] , \r_idle_cnt[16] , \r_idle_cnt[17] , 
         \r_idle_cnt[15] , \r_idle_cnt[14] , \w_idle_tmout_0_data_tmp[6] , 
         \r_idle_cnt[12] , \r_idle_cnt[13] , \r_idle_cnt[10] , 
         \r_idle_cnt[11] , \w_idle_tmout_0_data_tmp[4] , \r_idle_cnt[9] , 
         \r_idle_cnt[8] , \r_idle_cnt[7] , \r_idle_cnt[6] , 
         \w_idle_tmout_0_data_tmp[2] , \r_idle_cnt[4] , \r_idle_cnt[5] , 
         \r_idle_cnt[2] , \r_idle_cnt[3] , \w_idle_tmout_0_data_tmp[0] , 
         \r_idle_cnt[0] , \r_idle_cnt[1] , \r_duty_cnt[23] , 
         \r_duty_cnt_s[23] , r_duty_cnte, \r_duty_cnt_cry[22] , 
         \r_duty_cnt[22] , \r_duty_cnt[21] , \r_duty_cnt_s[22] , 
         \r_duty_cnt_s[21] , \r_duty_cnt_cry[20] , \r_duty_cnt[20] , 
         \r_duty_cnt[19] , \r_duty_cnt_s[20] , \r_duty_cnt_s[19] , 
         \r_duty_cnt_cry[18] , \r_duty_cnt[18] , \r_duty_cnt[17] , 
         \r_duty_cnt_s[18] , \r_duty_cnt_s[17] , \r_duty_cnt_cry[16] , 
         \r_duty_cnt[16] , \r_duty_cnt[15] , \r_duty_cnt_s[16] , 
         \r_duty_cnt_s[15] , \r_duty_cnt_cry[14] , \r_duty_cnt[14] , 
         \r_duty_cnt[13] , \r_duty_cnt_s[14] , \r_duty_cnt_s[13] , 
         \r_duty_cnt_cry[12] , \r_duty_cnt[12] , \r_duty_cnt[11] , 
         \r_duty_cnt_s[12] , \r_duty_cnt_s[11] , \r_duty_cnt_cry[10] , 
         \r_duty_cnt[10] , \r_duty_cnt[9] , \r_duty_cnt_s[10] , 
         \r_duty_cnt_s[9] , \r_duty_cnt_cry[8] , \r_duty_cnt[8] , 
         \r_duty_cnt[7] , \r_duty_cnt_s[8] , \r_duty_cnt_s[7] , 
         \r_duty_cnt_cry[6] , \r_duty_cnt[6] , \r_duty_cnt[5] , 
         \r_duty_cnt_s[6] , \r_duty_cnt_s[5] , \r_duty_cnt_cry[4] , 
         \r_duty_cnt[4] , \r_duty_cnt[3] , \r_duty_cnt_s[4] , 
         \r_duty_cnt_s[3] , \r_duty_cnt_cry[2] , \r_duty_cnt[2] , 
         \r_duty_cnt[1] , \r_duty_cnt_s[2] , \r_duty_cnt_s[1] , 
         \r_duty_cnt_cry[0] , \r_duty_cnt[0] , \r_duty_cnt_s[0] , r_idle_cnt, 
         \r_idle_cnt_s[23] , r_idle_cnte, \r_idle_cnt_cry[22] , 
         \r_idle_cnt_s[22] , \r_idle_cnt_s[21] , \r_idle_cnt_cry[20] , 
         \r_idle_cnt_s[20] , \r_idle_cnt_s[19] , \r_idle_cnt_cry[18] , 
         \r_idle_cnt_s[18] , \r_idle_cnt_s[17] , \r_idle_cnt_cry[16] , 
         \r_idle_cnt_s[16] , \r_idle_cnt_s[15] , \r_idle_cnt_cry[14] , 
         \r_idle_cnt_s[14] , \r_idle_cnt_s[13] , \r_idle_cnt_cry[12] , 
         \r_idle_cnt_s[12] , \r_idle_cnt_s[11] , \r_idle_cnt_cry[10] , 
         \r_idle_cnt_s[10] , \r_idle_cnt_s[9] , \r_idle_cnt_cry[8] , 
         \r_idle_cnt_s[8] , \r_idle_cnt_s[7] , \r_idle_cnt_cry[6] , 
         \r_idle_cnt_s[6] , \r_idle_cnt_s[5] , \r_idle_cnt_cry[4] , 
         \r_idle_cnt_s[4] , \r_idle_cnt_s[3] , \r_idle_cnt_cry[2] , 
         \r_idle_cnt_s[2] , \r_idle_cnt_s[1] , \r_idle_cnt_cry[0] , 
         \r_idle_cnt_s[0] , \r_interphase_cnt[23] , \r_interphase_cnt_s[23] , 
         \r_interphase_cnt_cry[22] , \r_interphase_cnt[22] , 
         \r_interphase_cnt[21] , \r_interphase_cnt_s[22] , 
         \r_interphase_cnt_s[21] , \r_interphase_cnt_cry[20] , 
         \r_interphase_cnt[20] , \r_interphase_cnt[19] , 
         \r_interphase_cnt_s[20] , \r_interphase_cnt_s[19] , 
         \r_interphase_cnt_cry[18] , \r_interphase_cnt[18] , 
         \r_interphase_cnt[17] , \r_interphase_cnt_s[18] , 
         \r_interphase_cnt_s[17] , \r_interphase_cnt_cry[16] , 
         \r_interphase_cnt[16] , \r_interphase_cnt[15] , 
         \r_interphase_cnt_s[16] , \r_interphase_cnt_s[15] , 
         \r_interphase_cnt_cry[14] , \r_interphase_cnt[14] , 
         \r_interphase_cnt[13] , \r_interphase_cnt_s[14] , 
         \r_interphase_cnt_s[13] , \r_interphase_cnt_cry[12] , 
         \r_interphase_cnt[12] , \r_interphase_cnt[11] , 
         \r_interphase_cnt_s[12] , \r_interphase_cnt_s[11] , 
         \r_interphase_cnt_cry[10] , \r_interphase_cnt[10] , 
         \r_interphase_cnt[9] , \r_interphase_cnt_s[10] , 
         \r_interphase_cnt_s[9] , \r_interphase_cnt_cry[8] , 
         \r_interphase_cnt[8] , \r_interphase_cnt[7] , \r_interphase_cnt_s[8] , 
         \r_interphase_cnt_s[7] , \r_interphase_cnt_cry[6] , 
         \r_interphase_cnt[6] , \r_interphase_cnt[5] , \r_interphase_cnt_s[6] , 
         \r_interphase_cnt_s[5] , \r_interphase_cnt_cry[4] , 
         \r_interphase_cnt[4] , \r_interphase_cnt[3] , \r_interphase_cnt_s[4] , 
         \r_interphase_cnt_s[3] , \r_interphase_cnt_cry[2] , 
         \r_interphase_cnt[2] , \r_interphase_cnt[1] , \r_interphase_cnt_s[2] , 
         \r_interphase_cnt_s[1] , \r_state[4] , r_anode_phase, 
         c_ano_top_0_sqmuxa, o_ano_bot_c, GND, \r_state[5] , r_cathod_phase, 
         c_cat_top_0_sqmuxa, o_cat_bot_c, VCC, i_stop_btn_c, i_start_btn_c, 
         o_led_b_c, r_led_b_2, i_rst_n_c, un1_r_led_g8, r_run_state, o_led_g_c, 
         r_led_g_2_iv_i, un1_r_led_g8_3_i, w_duty_tmout, 
         c_anode_phase_en_2_sqmuxa, \r_state[3] , r_idle_phase, 
         un1_w_anode_phase_end_en, r_interphase, \r_state[6] , 
         c_cathod_phase_en_1_sqmuxa, un1_w_cathod_phase_end_en, 
         c_idle_phase_en, \r_state[2] , un1_w_idle_tmout_1, c_ano_top_1_sqmuxa, 
         w_interphase_tmout_16, w_interphase_tmout_17, w_interphase_tmout_21, 
         r_interphase_cnt15, i_start_btn_c_i, \r_state_ns_a2_0_0[1] , 
         w_interphase_tmout_12, \r_state[0] , w_duty_tmout_12, \r_state[1] , 
         \r_state_ns[2] , \r_state_ns[1] , \r_state_ns[4] , \r_state_ns[3] , 
         \r_state_ns[6] , \r_state_ns[5] , w_duty_tmout_21, w_duty_tmout_17, 
         w_duty_tmout_16, w_interphase_tmout_15, w_interphase_tmout_14, 
         w_interphase_tmout_13, w_duty_tmout_15, w_duty_tmout_14, 
         w_duty_tmout_13, o_led_r_c, VCCI;

  SLICE_0 SLICE_0( .B1(\r_interphase_cnt[0] ), .A1(r_interphase_cnt), 
    .B0(r_interphase_cnt), .DI1(\r_interphase_cnt_s[0] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .F1(\r_interphase_cnt_s[0] ), 
    .Q1(\r_interphase_cnt[0] ), .FCO(\r_interphase_cnt_cry[0] ));
  SLICE_1 SLICE_1( .B0(\r_idle_cnt[23] ), .A0(\r_idle_cnt[22] ), 
    .FCI(\w_idle_tmout_0_data_tmp[10] ), .F1(\w_idle_tmout_0_data_tmp_i[11] ));
  SLICE_2 SLICE_2( .B1(\r_idle_cnt[21] ), .A1(\r_idle_cnt[20] ), 
    .C0(\r_idle[0] ), .B0(\r_idle_cnt[18] ), .A0(\r_idle_cnt[19] ), 
    .FCI(\w_idle_tmout_0_data_tmp[8] ), .FCO(\w_idle_tmout_0_data_tmp[10] ));
  SLICE_3 SLICE_3( .C1(\r_idle[0] ), .B1(\r_idle_cnt[16] ), 
    .A1(\r_idle_cnt[17] ), .B0(\r_idle_cnt[15] ), .A0(\r_idle_cnt[14] ), 
    .FCI(\w_idle_tmout_0_data_tmp[6] ), .FCO(\w_idle_tmout_0_data_tmp[8] ));
  SLICE_4 SLICE_4( .C1(\r_idle[0] ), .B1(\r_idle_cnt[12] ), 
    .A1(\r_idle_cnt[13] ), .C0(\r_idle[0] ), .B0(\r_idle_cnt[10] ), 
    .A0(\r_idle_cnt[11] ), .FCI(\w_idle_tmout_0_data_tmp[4] ), 
    .FCO(\w_idle_tmout_0_data_tmp[6] ));
  SLICE_5 SLICE_5( .C1(\r_idle[0] ), .B1(\r_idle_cnt[9] ), 
    .A1(\r_idle_cnt[8] ), .B0(\r_idle_cnt[7] ), .A0(\r_idle_cnt[6] ), 
    .FCI(\w_idle_tmout_0_data_tmp[2] ), .FCO(\w_idle_tmout_0_data_tmp[4] ));
  SLICE_6 SLICE_6( .C1(\r_idle[0] ), .B1(\r_idle_cnt[4] ), 
    .A1(\r_idle_cnt[5] ), .C0(\r_idle[0] ), .B0(\r_idle_cnt[2] ), 
    .A0(\r_idle_cnt[3] ), .FCI(\w_idle_tmout_0_data_tmp[0] ), 
    .FCO(\w_idle_tmout_0_data_tmp[2] ));
  SLICE_7 SLICE_7( .C1(\r_idle[0] ), .B1(\r_idle_cnt[0] ), 
    .A1(\r_idle_cnt[1] ), .FCO(\w_idle_tmout_0_data_tmp[0] ));
  SLICE_8 SLICE_8( .A0(\r_duty_cnt[23] ), .DI0(\r_duty_cnt_s[23] ), 
    .CE(r_duty_cnte), .CLK(w_clk), .FCI(\r_duty_cnt_cry[22] ), 
    .F0(\r_duty_cnt_s[23] ), .Q0(\r_duty_cnt[23] ));
  SLICE_9 SLICE_9( .A1(\r_duty_cnt[22] ), .A0(\r_duty_cnt[21] ), 
    .DI1(\r_duty_cnt_s[22] ), .DI0(\r_duty_cnt_s[21] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[20] ), .F0(\r_duty_cnt_s[21] ), 
    .Q0(\r_duty_cnt[21] ), .F1(\r_duty_cnt_s[22] ), .Q1(\r_duty_cnt[22] ), 
    .FCO(\r_duty_cnt_cry[22] ));
  SLICE_10 SLICE_10( .A1(\r_duty_cnt[20] ), .A0(\r_duty_cnt[19] ), 
    .DI1(\r_duty_cnt_s[20] ), .DI0(\r_duty_cnt_s[19] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[18] ), .F0(\r_duty_cnt_s[19] ), 
    .Q0(\r_duty_cnt[19] ), .F1(\r_duty_cnt_s[20] ), .Q1(\r_duty_cnt[20] ), 
    .FCO(\r_duty_cnt_cry[20] ));
  SLICE_11 SLICE_11( .A1(\r_duty_cnt[18] ), .A0(\r_duty_cnt[17] ), 
    .DI1(\r_duty_cnt_s[18] ), .DI0(\r_duty_cnt_s[17] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[16] ), .F0(\r_duty_cnt_s[17] ), 
    .Q0(\r_duty_cnt[17] ), .F1(\r_duty_cnt_s[18] ), .Q1(\r_duty_cnt[18] ), 
    .FCO(\r_duty_cnt_cry[18] ));
  SLICE_12 SLICE_12( .A1(\r_duty_cnt[16] ), .A0(\r_duty_cnt[15] ), 
    .DI1(\r_duty_cnt_s[16] ), .DI0(\r_duty_cnt_s[15] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[14] ), .F0(\r_duty_cnt_s[15] ), 
    .Q0(\r_duty_cnt[15] ), .F1(\r_duty_cnt_s[16] ), .Q1(\r_duty_cnt[16] ), 
    .FCO(\r_duty_cnt_cry[16] ));
  SLICE_13 SLICE_13( .A1(\r_duty_cnt[14] ), .A0(\r_duty_cnt[13] ), 
    .DI1(\r_duty_cnt_s[14] ), .DI0(\r_duty_cnt_s[13] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[12] ), .F0(\r_duty_cnt_s[13] ), 
    .Q0(\r_duty_cnt[13] ), .F1(\r_duty_cnt_s[14] ), .Q1(\r_duty_cnt[14] ), 
    .FCO(\r_duty_cnt_cry[14] ));
  SLICE_14 SLICE_14( .A1(\r_duty_cnt[12] ), .A0(\r_duty_cnt[11] ), 
    .DI1(\r_duty_cnt_s[12] ), .DI0(\r_duty_cnt_s[11] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[10] ), .F0(\r_duty_cnt_s[11] ), 
    .Q0(\r_duty_cnt[11] ), .F1(\r_duty_cnt_s[12] ), .Q1(\r_duty_cnt[12] ), 
    .FCO(\r_duty_cnt_cry[12] ));
  SLICE_15 SLICE_15( .A1(\r_duty_cnt[10] ), .A0(\r_duty_cnt[9] ), 
    .DI1(\r_duty_cnt_s[10] ), .DI0(\r_duty_cnt_s[9] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[8] ), .F0(\r_duty_cnt_s[9] ), 
    .Q0(\r_duty_cnt[9] ), .F1(\r_duty_cnt_s[10] ), .Q1(\r_duty_cnt[10] ), 
    .FCO(\r_duty_cnt_cry[10] ));
  SLICE_16 SLICE_16( .A1(\r_duty_cnt[8] ), .A0(\r_duty_cnt[7] ), 
    .DI1(\r_duty_cnt_s[8] ), .DI0(\r_duty_cnt_s[7] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[6] ), .F0(\r_duty_cnt_s[7] ), 
    .Q0(\r_duty_cnt[7] ), .F1(\r_duty_cnt_s[8] ), .Q1(\r_duty_cnt[8] ), 
    .FCO(\r_duty_cnt_cry[8] ));
  SLICE_17 SLICE_17( .A1(\r_duty_cnt[6] ), .A0(\r_duty_cnt[5] ), 
    .DI1(\r_duty_cnt_s[6] ), .DI0(\r_duty_cnt_s[5] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[4] ), .F0(\r_duty_cnt_s[5] ), 
    .Q0(\r_duty_cnt[5] ), .F1(\r_duty_cnt_s[6] ), .Q1(\r_duty_cnt[6] ), 
    .FCO(\r_duty_cnt_cry[6] ));
  SLICE_18 SLICE_18( .A1(\r_duty_cnt[4] ), .A0(\r_duty_cnt[3] ), 
    .DI1(\r_duty_cnt_s[4] ), .DI0(\r_duty_cnt_s[3] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[2] ), .F0(\r_duty_cnt_s[3] ), 
    .Q0(\r_duty_cnt[3] ), .F1(\r_duty_cnt_s[4] ), .Q1(\r_duty_cnt[4] ), 
    .FCO(\r_duty_cnt_cry[4] ));
  SLICE_19 SLICE_19( .A1(\r_duty_cnt[2] ), .A0(\r_duty_cnt[1] ), 
    .DI1(\r_duty_cnt_s[2] ), .DI0(\r_duty_cnt_s[1] ), .CE(r_duty_cnte), 
    .CLK(w_clk), .FCI(\r_duty_cnt_cry[0] ), .F0(\r_duty_cnt_s[1] ), 
    .Q0(\r_duty_cnt[1] ), .F1(\r_duty_cnt_s[2] ), .Q1(\r_duty_cnt[2] ), 
    .FCO(\r_duty_cnt_cry[2] ));
  SLICE_20 SLICE_20( .A1(\r_duty_cnt[0] ), .DI1(\r_duty_cnt_s[0] ), 
    .CE(r_duty_cnte), .CLK(w_clk), .F1(\r_duty_cnt_s[0] ), 
    .Q1(\r_duty_cnt[0] ), .FCO(\r_duty_cnt_cry[0] ));
  SLICE_21 SLICE_21( .B0(\r_idle_cnt[23] ), .A0(r_idle_cnt), 
    .DI0(\r_idle_cnt_s[23] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[22] ), .F0(\r_idle_cnt_s[23] ), .Q0(\r_idle_cnt[23] ));
  SLICE_22 SLICE_22( .B1(\r_idle_cnt[22] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[21] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[22] ), 
    .DI0(\r_idle_cnt_s[21] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[20] ), .F0(\r_idle_cnt_s[21] ), .Q0(\r_idle_cnt[21] ), 
    .F1(\r_idle_cnt_s[22] ), .Q1(\r_idle_cnt[22] ), .FCO(\r_idle_cnt_cry[22] ));
  SLICE_23 SLICE_23( .B1(\r_idle_cnt[20] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[19] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[20] ), 
    .DI0(\r_idle_cnt_s[19] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[18] ), .F0(\r_idle_cnt_s[19] ), .Q0(\r_idle_cnt[19] ), 
    .F1(\r_idle_cnt_s[20] ), .Q1(\r_idle_cnt[20] ), .FCO(\r_idle_cnt_cry[20] ));
  SLICE_24 SLICE_24( .B1(\r_idle_cnt[18] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[17] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[18] ), 
    .DI0(\r_idle_cnt_s[17] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[16] ), .F0(\r_idle_cnt_s[17] ), .Q0(\r_idle_cnt[17] ), 
    .F1(\r_idle_cnt_s[18] ), .Q1(\r_idle_cnt[18] ), .FCO(\r_idle_cnt_cry[18] ));
  SLICE_25 SLICE_25( .B1(\r_idle_cnt[16] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[15] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[16] ), 
    .DI0(\r_idle_cnt_s[15] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[14] ), .F0(\r_idle_cnt_s[15] ), .Q0(\r_idle_cnt[15] ), 
    .F1(\r_idle_cnt_s[16] ), .Q1(\r_idle_cnt[16] ), .FCO(\r_idle_cnt_cry[16] ));
  SLICE_26 SLICE_26( .B1(\r_idle_cnt[14] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[13] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[14] ), 
    .DI0(\r_idle_cnt_s[13] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[12] ), .F0(\r_idle_cnt_s[13] ), .Q0(\r_idle_cnt[13] ), 
    .F1(\r_idle_cnt_s[14] ), .Q1(\r_idle_cnt[14] ), .FCO(\r_idle_cnt_cry[14] ));
  SLICE_27 SLICE_27( .B1(\r_idle_cnt[12] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[11] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[12] ), 
    .DI0(\r_idle_cnt_s[11] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[10] ), .F0(\r_idle_cnt_s[11] ), .Q0(\r_idle_cnt[11] ), 
    .F1(\r_idle_cnt_s[12] ), .Q1(\r_idle_cnt[12] ), .FCO(\r_idle_cnt_cry[12] ));
  SLICE_28 SLICE_28( .B1(\r_idle_cnt[10] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[9] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[10] ), 
    .DI0(\r_idle_cnt_s[9] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[8] ), .F0(\r_idle_cnt_s[9] ), .Q0(\r_idle_cnt[9] ), 
    .F1(\r_idle_cnt_s[10] ), .Q1(\r_idle_cnt[10] ), .FCO(\r_idle_cnt_cry[10] ));
  SLICE_29 SLICE_29( .B1(\r_idle_cnt[8] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[7] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[8] ), 
    .DI0(\r_idle_cnt_s[7] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[6] ), .F0(\r_idle_cnt_s[7] ), .Q0(\r_idle_cnt[7] ), 
    .F1(\r_idle_cnt_s[8] ), .Q1(\r_idle_cnt[8] ), .FCO(\r_idle_cnt_cry[8] ));
  SLICE_30 SLICE_30( .B1(\r_idle_cnt[6] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[5] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[6] ), 
    .DI0(\r_idle_cnt_s[5] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[4] ), .F0(\r_idle_cnt_s[5] ), .Q0(\r_idle_cnt[5] ), 
    .F1(\r_idle_cnt_s[6] ), .Q1(\r_idle_cnt[6] ), .FCO(\r_idle_cnt_cry[6] ));
  SLICE_31 SLICE_31( .B1(\r_idle_cnt[4] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[3] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[4] ), 
    .DI0(\r_idle_cnt_s[3] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[2] ), .F0(\r_idle_cnt_s[3] ), .Q0(\r_idle_cnt[3] ), 
    .F1(\r_idle_cnt_s[4] ), .Q1(\r_idle_cnt[4] ), .FCO(\r_idle_cnt_cry[4] ));
  SLICE_32 SLICE_32( .B1(\r_idle_cnt[2] ), .A1(r_idle_cnt), 
    .B0(\r_idle_cnt[1] ), .A0(r_idle_cnt), .DI1(\r_idle_cnt_s[2] ), 
    .DI0(\r_idle_cnt_s[1] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .FCI(\r_idle_cnt_cry[0] ), .F0(\r_idle_cnt_s[1] ), .Q0(\r_idle_cnt[1] ), 
    .F1(\r_idle_cnt_s[2] ), .Q1(\r_idle_cnt[2] ), .FCO(\r_idle_cnt_cry[2] ));
  SLICE_33 SLICE_33( .B1(\r_idle_cnt[0] ), .A1(r_idle_cnt), .B0(r_idle_cnt), 
    .DI1(\r_idle_cnt_s[0] ), .CE(r_idle_cnte), .CLK(w_clk), 
    .F1(\r_idle_cnt_s[0] ), .Q1(\r_idle_cnt[0] ), .FCO(\r_idle_cnt_cry[0] ));
  SLICE_34 SLICE_34( .B0(\r_interphase_cnt[23] ), .A0(r_interphase_cnt), 
    .DI0(\r_interphase_cnt_s[23] ), .CE(r_interphase_cnte), .CLK(w_clk), 
    .FCI(\r_interphase_cnt_cry[22] ), .F0(\r_interphase_cnt_s[23] ), 
    .Q0(\r_interphase_cnt[23] ));
  SLICE_35 SLICE_35( .B1(\r_interphase_cnt[22] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[21] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[22] ), .DI0(\r_interphase_cnt_s[21] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[20] ), 
    .F0(\r_interphase_cnt_s[21] ), .Q0(\r_interphase_cnt[21] ), 
    .F1(\r_interphase_cnt_s[22] ), .Q1(\r_interphase_cnt[22] ), 
    .FCO(\r_interphase_cnt_cry[22] ));
  SLICE_36 SLICE_36( .B1(\r_interphase_cnt[20] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[19] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[20] ), .DI0(\r_interphase_cnt_s[19] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[18] ), 
    .F0(\r_interphase_cnt_s[19] ), .Q0(\r_interphase_cnt[19] ), 
    .F1(\r_interphase_cnt_s[20] ), .Q1(\r_interphase_cnt[20] ), 
    .FCO(\r_interphase_cnt_cry[20] ));
  SLICE_37 SLICE_37( .B1(\r_interphase_cnt[18] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[17] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[18] ), .DI0(\r_interphase_cnt_s[17] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[16] ), 
    .F0(\r_interphase_cnt_s[17] ), .Q0(\r_interphase_cnt[17] ), 
    .F1(\r_interphase_cnt_s[18] ), .Q1(\r_interphase_cnt[18] ), 
    .FCO(\r_interphase_cnt_cry[18] ));
  SLICE_38 SLICE_38( .B1(\r_interphase_cnt[16] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[15] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[16] ), .DI0(\r_interphase_cnt_s[15] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[14] ), 
    .F0(\r_interphase_cnt_s[15] ), .Q0(\r_interphase_cnt[15] ), 
    .F1(\r_interphase_cnt_s[16] ), .Q1(\r_interphase_cnt[16] ), 
    .FCO(\r_interphase_cnt_cry[16] ));
  SLICE_39 SLICE_39( .B1(\r_interphase_cnt[14] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[13] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[14] ), .DI0(\r_interphase_cnt_s[13] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[12] ), 
    .F0(\r_interphase_cnt_s[13] ), .Q0(\r_interphase_cnt[13] ), 
    .F1(\r_interphase_cnt_s[14] ), .Q1(\r_interphase_cnt[14] ), 
    .FCO(\r_interphase_cnt_cry[14] ));
  SLICE_40 SLICE_40( .B1(\r_interphase_cnt[12] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[11] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[12] ), .DI0(\r_interphase_cnt_s[11] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[10] ), 
    .F0(\r_interphase_cnt_s[11] ), .Q0(\r_interphase_cnt[11] ), 
    .F1(\r_interphase_cnt_s[12] ), .Q1(\r_interphase_cnt[12] ), 
    .FCO(\r_interphase_cnt_cry[12] ));
  SLICE_41 SLICE_41( .B1(\r_interphase_cnt[10] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[9] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[10] ), .DI0(\r_interphase_cnt_s[9] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[8] ), 
    .F0(\r_interphase_cnt_s[9] ), .Q0(\r_interphase_cnt[9] ), 
    .F1(\r_interphase_cnt_s[10] ), .Q1(\r_interphase_cnt[10] ), 
    .FCO(\r_interphase_cnt_cry[10] ));
  SLICE_42 SLICE_42( .B1(\r_interphase_cnt[8] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[7] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[8] ), .DI0(\r_interphase_cnt_s[7] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[6] ), 
    .F0(\r_interphase_cnt_s[7] ), .Q0(\r_interphase_cnt[7] ), 
    .F1(\r_interphase_cnt_s[8] ), .Q1(\r_interphase_cnt[8] ), 
    .FCO(\r_interphase_cnt_cry[8] ));
  SLICE_43 SLICE_43( .B1(\r_interphase_cnt[6] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[5] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[6] ), .DI0(\r_interphase_cnt_s[5] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[4] ), 
    .F0(\r_interphase_cnt_s[5] ), .Q0(\r_interphase_cnt[5] ), 
    .F1(\r_interphase_cnt_s[6] ), .Q1(\r_interphase_cnt[6] ), 
    .FCO(\r_interphase_cnt_cry[6] ));
  SLICE_44 SLICE_44( .B1(\r_interphase_cnt[4] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[3] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[4] ), .DI0(\r_interphase_cnt_s[3] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[2] ), 
    .F0(\r_interphase_cnt_s[3] ), .Q0(\r_interphase_cnt[3] ), 
    .F1(\r_interphase_cnt_s[4] ), .Q1(\r_interphase_cnt[4] ), 
    .FCO(\r_interphase_cnt_cry[4] ));
  SLICE_45 SLICE_45( .B1(\r_interphase_cnt[2] ), .A1(r_interphase_cnt), 
    .B0(\r_interphase_cnt[1] ), .A0(r_interphase_cnt), 
    .DI1(\r_interphase_cnt_s[2] ), .DI0(\r_interphase_cnt_s[1] ), 
    .CE(r_interphase_cnte), .CLK(w_clk), .FCI(\r_interphase_cnt_cry[0] ), 
    .F0(\r_interphase_cnt_s[1] ), .Q0(\r_interphase_cnt[1] ), 
    .F1(\r_interphase_cnt_s[2] ), .Q1(\r_interphase_cnt[2] ), 
    .FCO(\r_interphase_cnt_cry[2] ));
  SLICE_46 SLICE_46( .B0(\r_state[4] ), .A0(r_anode_phase), 
    .DI0(c_ano_top_0_sqmuxa), .CLK(w_clk), .F0(c_ano_top_0_sqmuxa), 
    .Q0(o_ano_bot_c), .F1(GND));
  SLICE_47 SLICE_47( .B0(\r_state[5] ), .A0(r_cathod_phase), 
    .DI0(c_cat_top_0_sqmuxa), .CLK(w_clk), .F0(c_cat_top_0_sqmuxa), 
    .Q0(o_cat_bot_c), .F1(VCC));
  SLICE_48 SLICE_48( .B1(i_stop_btn_c), .A1(i_start_btn_c), .C0(o_led_b_c), 
    .B0(i_stop_btn_c), .A0(i_start_btn_c), .DI0(r_led_b_2), .CE(i_rst_n_c), 
    .CLK(w_clk), .F0(r_led_b_2), .Q0(o_led_b_c), .F1(un1_r_led_g8));
  SLICE_49 SLICE_49( .C1(r_run_state), .B1(i_stop_btn_c), .A1(i_start_btn_c), 
    .C0(o_led_g_c), .B0(i_stop_btn_c), .A0(i_start_btn_c), 
    .DI0(r_led_g_2_iv_i), .CE(i_rst_n_c), .CLK(w_clk), .F0(r_led_g_2_iv_i), 
    .Q0(o_led_g_c), .F1(un1_r_led_g8_3_i));
  SLICE_50 SLICE_50( .C1(w_duty_tmout), .B1(r_anode_phase), 
    .A1(c_anode_phase_en_2_sqmuxa), .C0(\r_state[3] ), .B0(r_run_state), 
    .A0(r_idle_phase), .DI0(c_anode_phase_en_2_sqmuxa), 
    .CE(un1_w_anode_phase_end_en), .CLK(w_clk), .F0(c_anode_phase_en_2_sqmuxa), 
    .Q0(r_anode_phase), .F1(un1_w_anode_phase_end_en));
  SLICE_51 SLICE_51( .D1(r_interphase), .C1(\r_state[6] ), .B1(r_cathod_phase), 
    .A1(w_duty_tmout), .B0(\r_state[6] ), .A0(r_interphase), 
    .DI0(c_cathod_phase_en_1_sqmuxa), .CE(un1_w_cathod_phase_end_en), 
    .CLK(w_clk), .F0(c_cathod_phase_en_1_sqmuxa), .Q0(r_cathod_phase), 
    .F1(un1_w_cathod_phase_end_en));
  SLICE_52 SLICE_52( .C1(\w_idle_tmout_0_data_tmp_i[11] ), .B1(r_idle_phase), 
    .A1(c_idle_phase_en), .D0(\r_state[5] ), .C0(\r_state[2] ), 
    .B0(\r_idle[0] ), .A0(r_cathod_phase), .DI0(c_idle_phase_en), 
    .CE(un1_w_idle_tmout_1), .CLK(w_clk), .F0(c_idle_phase_en), 
    .Q0(r_idle_phase), .F1(r_idle_cnte));
  SLICE_53 SLICE_53( .D1(c_ano_top_1_sqmuxa), .C1(w_interphase_tmout_16), 
    .B1(w_interphase_tmout_17), .A1(w_interphase_tmout_21), .B0(\r_state[4] ), 
    .A0(r_anode_phase), .DI0(c_ano_top_1_sqmuxa), .CE(r_interphase_cnt15), 
    .CLK(w_clk), .F0(c_ano_top_1_sqmuxa), .Q0(r_interphase), 
    .F1(r_interphase_cnt));
  SLICE_54 SLICE_54( .B1(\r_state[3] ), .A1(r_idle_phase), .A0(i_start_btn_c), 
    .DI0(i_start_btn_c_i), .CE(un1_r_led_g8), .CLK(w_clk), 
    .F0(i_start_btn_c_i), .Q0(r_run_state), .F1(\r_state_ns_a2_0_0[1] ));
  SLICE_55 SLICE_55( .D1(\r_duty_cnt[19] ), .C1(\r_duty_cnt[18] ), 
    .B1(\r_duty_cnt[17] ), .A1(\r_duty_cnt[16] ), .D0(\r_interphase_cnt[19] ), 
    .C0(\r_interphase_cnt[18] ), .B0(\r_interphase_cnt[17] ), 
    .A0(\r_interphase_cnt[16] ), .CLK(w_clk), .F0(w_interphase_tmout_12), 
    .Q0(\r_state[0] ), .F1(w_duty_tmout_12));
  SLICE_56 SLICE_56( .D1(\r_state[2] ), .C1(\r_state[1] ), .B1(r_run_state), 
    .A1(\r_idle[0] ), .D0(\r_state_ns_a2_0_0[1] ), .C0(\r_state[1] ), 
    .B0(\r_state[0] ), .A0(r_run_state), .DI1(\r_state_ns[2] ), 
    .DI0(\r_state_ns[1] ), .CLK(w_clk), .F0(\r_state_ns[1] ), 
    .Q0(\r_state[1] ), .F1(\r_state_ns[2] ), .Q1(\r_state[2] ));
  SLICE_57 SLICE_57( .D1(r_idle_phase), .C1(r_run_state), .B1(\r_state[3] ), 
    .A1(c_ano_top_0_sqmuxa), .C0(\r_state[3] ), .B0(r_idle_phase), 
    .A0(c_idle_phase_en), .DI1(\r_state_ns[4] ), .DI0(\r_state_ns[3] ), 
    .CLK(w_clk), .F0(\r_state_ns[3] ), .Q0(\r_state[3] ), .F1(\r_state_ns[4] ), 
    .Q1(\r_state[4] ));
  SLICE_58 SLICE_58( .D1(r_anode_phase), .C1(\r_state[4] ), .B1(r_interphase), 
    .A1(\r_state[6] ), .D0(r_interphase), .C0(\r_state[6] ), .B0(\r_state[5] ), 
    .A0(r_cathod_phase), .DI1(\r_state_ns[6] ), .DI0(\r_state_ns[5] ), 
    .CLK(w_clk), .F0(\r_state_ns[5] ), .Q0(\r_state[5] ), .F1(\r_state_ns[6] ), 
    .Q1(\r_state[6] ));
  SLICE_59 SLICE_59( .D1(w_interphase_tmout_21), .C1(w_interphase_tmout_17), 
    .B1(w_interphase_tmout_16), .A1(c_ano_top_1_sqmuxa), 
    .B0(r_interphase_cnt15), .A0(r_interphase), .F0(r_interphase_cnte), 
    .F1(r_interphase_cnt15));
  SLICE_60 SLICE_60( .C1(w_duty_tmout_21), .B1(w_duty_tmout_17), 
    .A1(w_duty_tmout_16), .C0(w_duty_tmout), .B0(r_cathod_phase), 
    .A0(r_anode_phase), .F0(r_duty_cnte), .F1(w_duty_tmout));
  SLICE_61 SLICE_61( .D1(\r_interphase_cnt[8] ), .C1(\r_interphase_cnt[5] ), 
    .B1(\r_interphase_cnt[4] ), .A1(\r_interphase_cnt[1] ), 
    .D0(w_interphase_tmout_15), .C0(w_interphase_tmout_14), 
    .B0(w_interphase_tmout_13), .A0(w_interphase_tmout_12), 
    .F0(w_interphase_tmout_21), .F1(w_interphase_tmout_15));
  SLICE_62 SLICE_62( .D1(\r_duty_cnt[7] ), .C1(\r_duty_cnt[6] ), 
    .B1(\r_duty_cnt[5] ), .A1(\r_duty_cnt[4] ), .D0(w_duty_tmout_15), 
    .C0(w_duty_tmout_14), .B0(w_duty_tmout_13), .A0(w_duty_tmout_12), 
    .F0(w_duty_tmout_21), .F1(w_duty_tmout_15));
  SLICE_63 SLICE_63( .C1(\w_idle_tmout_0_data_tmp_i[11] ), .B1(r_idle_phase), 
    .A1(c_idle_phase_en), .B0(\w_idle_tmout_0_data_tmp_i[11] ), 
    .A0(c_idle_phase_en), .F0(r_idle_cnt), .F1(un1_w_idle_tmout_1));
  SLICE_64 SLICE_64( .D1(\r_duty_cnt[11] ), .C1(\r_duty_cnt[10] ), 
    .B1(\r_duty_cnt[9] ), .A1(\r_duty_cnt[8] ), .D0(\r_duty_cnt[15] ), 
    .C0(\r_duty_cnt[14] ), .B0(\r_duty_cnt[13] ), .A0(\r_duty_cnt[12] ), 
    .F0(w_duty_tmout_17), .F1(w_duty_tmout_16));
  SLICE_65 SLICE_65( .D1(\r_duty_cnt[23] ), .C1(\r_duty_cnt[22] ), 
    .B1(\r_duty_cnt[21] ), .A1(\r_duty_cnt[20] ), .D0(\r_duty_cnt[3] ), 
    .C0(\r_duty_cnt[2] ), .B0(\r_duty_cnt[1] ), .A0(\r_duty_cnt[0] ), 
    .F0(w_duty_tmout_14), .F1(w_duty_tmout_13));
  SLICE_66 SLICE_66( .D1(\r_interphase_cnt[23] ), .C1(\r_interphase_cnt[22] ), 
    .B1(\r_interphase_cnt[21] ), .A1(\r_interphase_cnt[20] ), 
    .D0(\r_interphase_cnt[6] ), .C0(\r_interphase_cnt[3] ), 
    .B0(\r_interphase_cnt[2] ), .A0(\r_interphase_cnt[0] ), 
    .F0(w_interphase_tmout_14), .F1(w_interphase_tmout_13));
  SLICE_67 SLICE_67( .D1(\r_interphase_cnt[11] ), .C1(\r_interphase_cnt[10] ), 
    .B1(\r_interphase_cnt[9] ), .A1(\r_interphase_cnt[7] ), 
    .D0(\r_interphase_cnt[15] ), .C0(\r_interphase_cnt[14] ), 
    .B0(\r_interphase_cnt[13] ), .A0(\r_interphase_cnt[12] ), 
    .F0(w_interphase_tmout_17), .F1(w_interphase_tmout_16));
  o_ano_top o_ano_top_I( .PADDO(o_ano_bot_c), .o_ano_top(o_ano_top));
  i_rst_n i_rst_n_I( .PADDI(i_rst_n_c), .i_rst_n(i_rst_n));
  o_led_b o_led_b_I( .PADDO(o_led_b_c), .o_led_b(o_led_b));
  o_led_g o_led_g_I( .PADDO(o_led_g_c), .o_led_g(o_led_g));
  o_led_r o_led_r_I( .IOLDO(o_led_r_c), .o_led_r(o_led_r));
  o_led_r_MGIOL o_led_r_MGIOL( .IOLDO(o_led_r_c), .OPOS(VCC), .CLK(w_clk));
  o_curr_ena o_curr_ena_I( .PADDO(GND), .o_curr_ena(o_curr_ena));
  o_cat_bot o_cat_bot_I( .PADDO(o_cat_bot_c), .o_cat_bot(o_cat_bot));
  o_cat_top o_cat_top_I( .PADDO(o_cat_bot_c), .o_cat_top(o_cat_top));
  o_ano_bot o_ano_bot_I( .PADDO(o_ano_bot_c), .o_ano_bot(o_ano_bot));
  i_stop_btn i_stop_btn_I( .PADDI(i_stop_btn_c), .i_stop_btn(i_stop_btn));
  i_stop_btn_MGIOL i_stop_btn_MGIOL( .DI(i_stop_btn_c), .CE(un1_r_led_g8_3_i), 
    .CLK(w_clk), .IN(\r_idle[0] ));
  i_start_btn i_start_btn_I( .PADDI(i_start_btn_c), .i_start_btn(i_start_btn));
  internal_osc internal_osc( .OSC(w_clk));
  GSR_INST GSR_INST( .GSRNET(i_rst_n_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input B1, A1, B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \r_interphase_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_1 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20001 w_idle_tmout_0_I_45_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h300F;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20002 w_idle_tmout_0_I_57_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5041;
  defparam inst1.INIT1 = 16'h5001;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SLICE_3 ( input C1, B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 w_idle_tmout_0_I_21_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h5041;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SLICE_4 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 w_idle_tmout_0_I_33_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5041;
  defparam inst1.INIT1 = 16'h5041;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SLICE_5 ( input C1, B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 w_idle_tmout_0_I_27_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_6 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 w_idle_tmout_0_I_9_0( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_7 ( input C1, B1, A1, output FCO );
  wire   GNDI;

  ccu20005 w_idle_tmout_0_I_1_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5041;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SLICE_8 ( input A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \r_duty_cnt[23] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20006 \r_duty_cnt_s_0[23] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5002;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_9 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[22] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[21] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[21] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_10 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[19] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[17] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[15] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[13] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_14 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[11] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[9] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[7] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[5] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_18 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[3] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_19 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_duty_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_duty_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \r_duty_cnt_cry_0[1] ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_20 ( input A1, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \r_duty_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \r_duty_cnt_cry_0[0] ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_21 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \r_idle_cnt[23] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20009 \r_idle_cnt_s_0[23] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_22 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[22] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[21] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[21] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_23 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[19] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_24 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[17] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_25 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[15] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_26 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[13] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_27 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[11] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_28 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[9] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_29 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_30 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_31 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_32 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_idle_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_idle_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_idle_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_33 ( input B1, A1, B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \r_idle_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \r_idle_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_34 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[23] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20009 \r_interphase_cnt_s_0[23] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_35 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[22] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[21] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[21] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_36 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[19] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_37 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[17] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_38 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[15] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_39 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[13] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_40 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[11] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_41 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[9] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_42 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_43 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_44 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_45 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \r_interphase_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_interphase_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \r_interphase_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_46 ( input B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut4 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 c_ano_top_0_sqmuxa_0_a2( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre r_ano_top( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_47 ( input B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40012 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 c_cat_top_0_sqmuxa_0_a2( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre r_cat_top( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_48 ( input B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40013 un1_r_led_g8( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40014 r_led_b_2_iv( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0015 r_led_b( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD5D5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0015 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_49 ( input C1, B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40016 \r_idle_0io_RNO[0] ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 r_led_g_2_iv_i( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0015 r_led_g( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA2A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_50 ( input C1, B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40017 un1_w_anode_phase_end_en( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \r_state_ns_a2[4] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre r_anode_phase( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_51 ( input D1, C1, B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 un1_w_cathod_phase_end_en( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 c_cathod_phase_en_1_sqmuxa_0_a2( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre r_cathod_phase( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_52 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40021 w_idle_tmout_0_I_45_0_RNIMRQ41( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \r_state_ns_o2[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre r_idle_phase( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD5C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_53 ( input D1, C1, B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40023 r_interphase_cnt15_i( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 c_ano_top_1_sqmuxa_0_a2( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre r_interphase( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h007F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_54 ( input B1, A1, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40020 \r_state_ns_a2_0_0[1] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 r_run_state_RNO( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre r_run_state( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_55 ( input D1, C1, B1, A1, D0, C0, B0, A0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 w_duty_tmout_12( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 w_interphase_tmout_12( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0015 \r_state[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(CLK), .LSR(GNDI), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_56 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40022 \r_state_ns[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \r_state_ns[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_state[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_state[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40027 \r_state_RNO[4] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \r_state_ns[3] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_state[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_state[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_58 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \r_state_RNO[6] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 \r_state_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_state[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_state[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_59 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40029 r_interphase_cnt15( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40030 r_interphase_cnt15_RNIIU4D( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_60 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40031 w_duty_tmout( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 r_duty_cnt15( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E0E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_61 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40033 w_interphase_tmout_15( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40034 w_interphase_tmout_21( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_62 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 w_duty_tmout_15( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40034 w_duty_tmout_21( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_63 ( input C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40017 un1_w_idle_tmout_1( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 r_idle_cnt15_i( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_64 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 w_duty_tmout_16( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 w_duty_tmout_17( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_65 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 w_duty_tmout_13( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 w_duty_tmout_14( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_66 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 w_interphase_tmout_13( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40034 w_interphase_tmout_14( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_67 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 w_interphase_tmout_16( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 w_interphase_tmout_17( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_ano_top ( input PADDO, output o_ano_top );

  xo2iobuf o_ano_top_pad( .I(PADDO), .PAD(o_ano_top));

  specify
    (PADDO => o_ano_top) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module i_rst_n ( output PADDI, input i_rst_n );

  xo2iobuf0036 i_rst_n_pad( .Z(PADDI), .PAD(i_rst_n));

  specify
    (i_rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rst_n, 0:0:0);
    $width (negedge i_rst_n, 0:0:0);
  endspecify

endmodule

module xo2iobuf0036 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module o_led_b ( input PADDO, output o_led_b );

  xo2iobuf0037 o_led_b_pad( .I(PADDO), .PAD(o_led_b));

  specify
    (PADDO => o_led_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0037 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module o_led_g ( input PADDO, output o_led_g );

  xo2iobuf0037 o_led_g_pad( .I(PADDO), .PAD(o_led_g));

  specify
    (PADDO => o_led_g) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_led_r ( input IOLDO, output o_led_r );

  xo2iobuf0037 o_led_r_pad( .I(IOLDO), .PAD(o_led_r));

  specify
    (IOLDO => o_led_r) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_led_r_MGIOL ( output IOLDO, input OPOS, CLK );
  wire   VCCI, GNDI, OPOS_dly, CLK_dly;

  mfflsre r_led_r_0io( .D0(OPOS_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module o_curr_ena ( input PADDO, output o_curr_ena );

  xo2iobuf o_curr_ena_pad( .I(PADDO), .PAD(o_curr_ena));

  specify
    (PADDO => o_curr_ena) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_cat_bot ( input PADDO, output o_cat_bot );

  xo2iobuf o_cat_bot_pad( .I(PADDO), .PAD(o_cat_bot));

  specify
    (PADDO => o_cat_bot) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_cat_top ( input PADDO, output o_cat_top );

  xo2iobuf o_cat_top_pad( .I(PADDO), .PAD(o_cat_top));

  specify
    (PADDO => o_cat_top) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_ano_bot ( input PADDO, output o_ano_bot );

  xo2iobuf o_ano_bot_pad( .I(PADDO), .PAD(o_ano_bot));

  specify
    (PADDO => o_ano_bot) = (0:0:0,0:0:0);
  endspecify

endmodule

module i_stop_btn ( output PADDI, input i_stop_btn );

  xo2iobuf0036 i_stop_btn_pad( .Z(PADDI), .PAD(i_stop_btn));

  specify
    (i_stop_btn => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_stop_btn, 0:0:0);
    $width (negedge i_stop_btn, 0:0:0);
  endspecify

endmodule

module i_stop_btn_MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre \r_idle_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module i_start_btn ( output PADDI, input i_start_btn );

  xo2iobuf0036 i_start_btn_pad( .Z(PADDI), .PAD(i_start_btn));

  specify
    (i_start_btn => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_start_btn, 0:0:0);
    $width (negedge i_start_btn, 0:0:0);
  endspecify

endmodule

module internal_osc ( output OSC );
  wire   GNDI;

  OSCH_B internal_osc_OSCH( .STDBY(GNDI), .OSC(OSC), .SEDSTDBY());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module OSCH_B ( input STDBY, output OSC, SEDSTDBY );

  OSCH INST10( .STDBY(STDBY), .OSC(OSC), .SEDSTDBY(SEDSTDBY));
  defparam INST10.NOM_FREQ = "3.33";
endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule

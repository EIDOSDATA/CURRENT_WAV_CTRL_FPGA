
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.12.1.454

// ldbanno -n Verilog -o common_impl1_vo.vo -w -neg -gui -msgset C:/Users/eidos/GitHub/CURRENT_WAV_CTRL_FPGA/Project/db/work/promote.xml common_impl1.ncd 
// Netlist created on Thu Jul 21 18:26:10 2022
// Netlist written on Thu Jul 21 18:26:18 2022
// Design is for device LCMXO2-2000ZE
// Design is for package TQFP100
// Design is for performance grade 1

`timescale 1 ns / 1 ps

module ci_stim_fpga_wrapper ( i_rst_n, out_sw1_sig, out_sw2_sig, out_sw3_sig, 
                              out_sw4_sig, output_ctrl_sig );
  input  i_rst_n;
  output out_sw1_sig, out_sw2_sig, out_sw3_sig, out_sw4_sig, output_ctrl_sig;
  wire   cnt_c, \cnt_c[0] , \cnt_c_s[0] , un1_cnt_alto21, w_clk, 
         \cnt_c_cry[0] , \cnt_a[21] , un1_cnt_a_1_cry_20, 
         un1_cnt_a_1_s_21_0_S0, \cnt_a[20] , \cnt_a[19] , \un1_cnt_a_1[19] , 
         un1_cnt_a_1_cry_18, un1_cnt_a_1_cry_19_0_S1, \cnt_a[18] , \cnt_a[17] , 
         \un1_cnt_a_1[18] , un1_cnt_a_1_cry_16, un1_cnt_a_1_cry_17_0_S0, 
         \cnt_a[16] , \cnt_a[15] , \un1_cnt_a_1[16] , un1_cnt_a_1_cry_14, 
         un1_cnt_a_1_cry_15_0_S0, \cnt_a[14] , \cnt_a[13] , \un1_cnt_a_1[13] , 
         un1_cnt_a_1_cry_12, un1_cnt_a_1_cry_13_0_S1, \cnt_a[12] , \cnt_a[11] , 
         un1_cnt_a_1_cry_10, un1_cnt_a_1_cry_11_0_S0, un1_cnt_a_1_cry_11_0_S1, 
         \cnt_a[10] , un8lto9, \un1_cnt_a_1[9] , un1_cnt_a_1_cry_8, 
         un1_cnt_a_1_cry_9_0_S1, un8lto8, \cnt_a[7] , \un1_cnt_a_1[8] , 
         un1_cnt_a_1_cry_6, un1_cnt_a_1_cry_7_0_S0, \cnt_a[6] , \cnt_a[5] , 
         \un1_cnt_a_1[5] , un1_cnt_a_1_cry_4, un1_cnt_a_1_cry_5_0_S1, 
         \cnt_a[4] , \cnt_a[3] , \un1_cnt_a_1[3] , un1_cnt_a_1_cry_2, 
         un1_cnt_a_1_cry_3_0_S1, un8lto2, un8lt2, un1_cnt_a_1_cry_0, 
         un1_cnt_a_1_cry_1_0_S0, un1_cnt_a_1_cry_1_0_S1, un8lto0, cnt_a16_i, 
         \un1_cnt_a_1[0] , \cnt_c[21] , \cnt_c_s[21] , \cnt_c_cry[20] , 
         \cnt_c[20] , \cnt_c[19] , \cnt_c_s[20] , \cnt_c_s[19] , 
         \cnt_c_cry[18] , \cnt_c[18] , \cnt_c[17] , \cnt_c_s[18] , 
         \cnt_c_s[17] , \cnt_c_cry[16] , \cnt_c[16] , \cnt_c[15] , 
         \cnt_c_s[16] , \cnt_c_s[15] , \cnt_c_cry[14] , \cnt_c[14] , 
         \cnt_c[13] , \cnt_c_s[14] , \cnt_c_s[13] , \cnt_c_cry[12] , 
         \cnt_c[12] , \cnt_c[11] , \cnt_c_s[12] , \cnt_c_s[11] , 
         \cnt_c_cry[10] , un9lto10, \cnt_c[9] , \cnt_c_s[10] , \cnt_c_s[9] , 
         \cnt_c_cry[8] , \cnt_c[8] , un9lto7, \cnt_c_s[8] , \cnt_c_s[7] , 
         \cnt_c_cry[6] , un9lto6, un9lto5, \cnt_c_s[6] , \cnt_c_s[5] , 
         \cnt_c_cry[4] , un9lto4, un9lt4, \cnt_c_s[4] , \cnt_c_s[3] , 
         \cnt_c_cry[2] , \cnt_c[2] , \cnt_c[1] , \cnt_c_s[2] , \cnt_c_s[1] , 
         \cnt_a_3[6] , \cnt_a_3[4] , \cnt_a_3[10] , \cnt_a_3[7] , 
         \cnt_a_3[12] , \cnt_a_3[11] , \cnt_a_3[15] , \cnt_a_3[14] , 
         \cnt_a_3[20] , \cnt_a_3[17] , \cnt_a_3[21] , un1_cnt_clto7_0, 
         un8lto7_3, un8lto7_2, un8lto21_8, un8lt11, un8_i, out_sw1_sig_c, 
         un9lt10, un9lto21_5, un9lto21_6, un9lt21, un9_i, out_sw3_sig_c, 
         \cnt_a_3[1] , un1_cnt_alto21_1, \cnt_a_3[2] , un1_cnt_clto19_0, 
         un1_cnt_clt19, un1_cnt_clt15, un1_cnt_clto15_1, un1_cnt_alt16, 
         un1_cnt_alt13, un8lto21, output_ctrl_sig8, un1_cnt_clt7, 
         un1_cnt_clt10, un1_cnt_alto12_1, un1_cnt_alt9, un8lto21_6, un8lto21_5, 
         un1_cnt_alt2, un1_cnt_alt5, un9lt7, un1_cnt_clt4, un9lto21_0, 
         i_rst_n_c, output_ctrl_sig_c, VCCI;

  SLICE_0 SLICE_0( .B1(cnt_c), .A1(\cnt_c[0] ), .B0(cnt_c), .DI1(\cnt_c_s[0] ), 
    .CE(un1_cnt_alto21), .CLK(w_clk), .F1(\cnt_c_s[0] ), .Q1(\cnt_c[0] ), 
    .FCO(\cnt_c_cry[0] ));
  SLICE_1 SLICE_1( .A0(\cnt_a[21] ), .FCI(un1_cnt_a_1_cry_20), 
    .F0(un1_cnt_a_1_s_21_0_S0));
  SLICE_2 SLICE_2( .B1(\cnt_a[20] ), .A0(\cnt_a[19] ), .DI0(\un1_cnt_a_1[19] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_18), .F0(\un1_cnt_a_1[19] ), 
    .Q0(\cnt_a[19] ), .F1(un1_cnt_a_1_cry_19_0_S1), .FCO(un1_cnt_a_1_cry_20));
  SLICE_3 SLICE_3( .A1(\cnt_a[18] ), .A0(\cnt_a[17] ), .DI1(\un1_cnt_a_1[18] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_16), .F0(un1_cnt_a_1_cry_17_0_S0), 
    .F1(\un1_cnt_a_1[18] ), .Q1(\cnt_a[18] ), .FCO(un1_cnt_a_1_cry_18));
  SLICE_4 SLICE_4( .A1(\cnt_a[16] ), .A0(\cnt_a[15] ), .DI1(\un1_cnt_a_1[16] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_14), .F0(un1_cnt_a_1_cry_15_0_S0), 
    .F1(\un1_cnt_a_1[16] ), .Q1(\cnt_a[16] ), .FCO(un1_cnt_a_1_cry_16));
  SLICE_5 SLICE_5( .B1(\cnt_a[14] ), .A0(\cnt_a[13] ), .DI0(\un1_cnt_a_1[13] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_12), .F0(\un1_cnt_a_1[13] ), 
    .Q0(\cnt_a[13] ), .F1(un1_cnt_a_1_cry_13_0_S1), .FCO(un1_cnt_a_1_cry_14));
  SLICE_6 SLICE_6( .B1(\cnt_a[12] ), .A0(\cnt_a[11] ), 
    .FCI(un1_cnt_a_1_cry_10), .F0(un1_cnt_a_1_cry_11_0_S0), 
    .F1(un1_cnt_a_1_cry_11_0_S1), .FCO(un1_cnt_a_1_cry_12));
  SLICE_7 SLICE_7( .B1(\cnt_a[10] ), .A0(un8lto9), .DI0(\un1_cnt_a_1[9] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_8), .F0(\un1_cnt_a_1[9] ), .Q0(un8lto9), 
    .F1(un1_cnt_a_1_cry_9_0_S1), .FCO(un1_cnt_a_1_cry_10));
  SLICE_8 SLICE_8( .A1(un8lto8), .A0(\cnt_a[7] ), .DI1(\un1_cnt_a_1[8] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_6), .F0(un1_cnt_a_1_cry_7_0_S0), 
    .F1(\un1_cnt_a_1[8] ), .Q1(un8lto8), .FCO(un1_cnt_a_1_cry_8));
  SLICE_9 SLICE_9( .A1(\cnt_a[6] ), .A0(\cnt_a[5] ), .DI0(\un1_cnt_a_1[5] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_4), .F0(\un1_cnt_a_1[5] ), 
    .Q0(\cnt_a[5] ), .F1(un1_cnt_a_1_cry_5_0_S1), .FCO(un1_cnt_a_1_cry_6));
  SLICE_10 SLICE_10( .B1(\cnt_a[4] ), .A0(\cnt_a[3] ), .DI0(\un1_cnt_a_1[3] ), 
    .CLK(w_clk), .FCI(un1_cnt_a_1_cry_2), .F0(\un1_cnt_a_1[3] ), 
    .Q0(\cnt_a[3] ), .F1(un1_cnt_a_1_cry_3_0_S1), .FCO(un1_cnt_a_1_cry_4));
  SLICE_11 SLICE_11( .A1(un8lto2), .B0(un8lt2), .FCI(un1_cnt_a_1_cry_0), 
    .F0(un1_cnt_a_1_cry_1_0_S0), .F1(un1_cnt_a_1_cry_1_0_S1), 
    .FCO(un1_cnt_a_1_cry_2));
  SLICE_12 SLICE_12( .A1(un8lto0), .A0(cnt_a16_i), .DI1(\un1_cnt_a_1[0] ), 
    .CLK(w_clk), .F1(\un1_cnt_a_1[0] ), .Q1(un8lto0), .FCO(un1_cnt_a_1_cry_0));
  SLICE_13 SLICE_13( .B0(cnt_c), .A0(\cnt_c[21] ), .DI0(\cnt_c_s[21] ), 
    .CE(un1_cnt_alto21), .CLK(w_clk), .FCI(\cnt_c_cry[20] ), 
    .F0(\cnt_c_s[21] ), .Q0(\cnt_c[21] ));
  SLICE_14 SLICE_14( .B1(\cnt_c[20] ), .A1(cnt_c), .B0(\cnt_c[19] ), 
    .A0(cnt_c), .DI1(\cnt_c_s[20] ), .DI0(\cnt_c_s[19] ), .CE(un1_cnt_alto21), 
    .CLK(w_clk), .FCI(\cnt_c_cry[18] ), .F0(\cnt_c_s[19] ), .Q0(\cnt_c[19] ), 
    .F1(\cnt_c_s[20] ), .Q1(\cnt_c[20] ), .FCO(\cnt_c_cry[20] ));
  SLICE_15 SLICE_15( .B1(cnt_c), .A1(\cnt_c[18] ), .B0(cnt_c), 
    .A0(\cnt_c[17] ), .DI1(\cnt_c_s[18] ), .DI0(\cnt_c_s[17] ), 
    .CE(un1_cnt_alto21), .CLK(w_clk), .FCI(\cnt_c_cry[16] ), 
    .F0(\cnt_c_s[17] ), .Q0(\cnt_c[17] ), .F1(\cnt_c_s[18] ), .Q1(\cnt_c[18] ), 
    .FCO(\cnt_c_cry[18] ));
  SLICE_16 SLICE_16( .B1(\cnt_c[16] ), .A1(cnt_c), .B0(\cnt_c[15] ), 
    .A0(cnt_c), .DI1(\cnt_c_s[16] ), .DI0(\cnt_c_s[15] ), .CE(un1_cnt_alto21), 
    .CLK(w_clk), .FCI(\cnt_c_cry[14] ), .F0(\cnt_c_s[15] ), .Q0(\cnt_c[15] ), 
    .F1(\cnt_c_s[16] ), .Q1(\cnt_c[16] ), .FCO(\cnt_c_cry[16] ));
  SLICE_17 SLICE_17( .B1(\cnt_c[14] ), .A1(cnt_c), .B0(\cnt_c[13] ), 
    .A0(cnt_c), .DI1(\cnt_c_s[14] ), .DI0(\cnt_c_s[13] ), .CE(un1_cnt_alto21), 
    .CLK(w_clk), .FCI(\cnt_c_cry[12] ), .F0(\cnt_c_s[13] ), .Q0(\cnt_c[13] ), 
    .F1(\cnt_c_s[14] ), .Q1(\cnt_c[14] ), .FCO(\cnt_c_cry[14] ));
  SLICE_18 SLICE_18( .B1(\cnt_c[12] ), .A1(cnt_c), .B0(\cnt_c[11] ), 
    .A0(cnt_c), .DI1(\cnt_c_s[12] ), .DI0(\cnt_c_s[11] ), .CE(un1_cnt_alto21), 
    .CLK(w_clk), .FCI(\cnt_c_cry[10] ), .F0(\cnt_c_s[11] ), .Q0(\cnt_c[11] ), 
    .F1(\cnt_c_s[12] ), .Q1(\cnt_c[12] ), .FCO(\cnt_c_cry[12] ));
  SLICE_19 SLICE_19( .B1(un9lto10), .A1(cnt_c), .B0(\cnt_c[9] ), .A0(cnt_c), 
    .DI1(\cnt_c_s[10] ), .DI0(\cnt_c_s[9] ), .CE(un1_cnt_alto21), .CLK(w_clk), 
    .FCI(\cnt_c_cry[8] ), .F0(\cnt_c_s[9] ), .Q0(\cnt_c[9] ), 
    .F1(\cnt_c_s[10] ), .Q1(un9lto10), .FCO(\cnt_c_cry[10] ));
  SLICE_20 SLICE_20( .B1(\cnt_c[8] ), .A1(cnt_c), .B0(un9lto7), .A0(cnt_c), 
    .DI1(\cnt_c_s[8] ), .DI0(\cnt_c_s[7] ), .CE(un1_cnt_alto21), .CLK(w_clk), 
    .FCI(\cnt_c_cry[6] ), .F0(\cnt_c_s[7] ), .Q0(un9lto7), .F1(\cnt_c_s[8] ), 
    .Q1(\cnt_c[8] ), .FCO(\cnt_c_cry[8] ));
  SLICE_21 SLICE_21( .B1(un9lto6), .A1(cnt_c), .B0(un9lto5), .A0(cnt_c), 
    .DI1(\cnt_c_s[6] ), .DI0(\cnt_c_s[5] ), .CE(un1_cnt_alto21), .CLK(w_clk), 
    .FCI(\cnt_c_cry[4] ), .F0(\cnt_c_s[5] ), .Q0(un9lto5), .F1(\cnt_c_s[6] ), 
    .Q1(un9lto6), .FCO(\cnt_c_cry[6] ));
  SLICE_22 SLICE_22( .B1(un9lto4), .A1(cnt_c), .B0(un9lt4), .A0(cnt_c), 
    .DI1(\cnt_c_s[4] ), .DI0(\cnt_c_s[3] ), .CE(un1_cnt_alto21), .CLK(w_clk), 
    .FCI(\cnt_c_cry[2] ), .F0(\cnt_c_s[3] ), .Q0(un9lt4), .F1(\cnt_c_s[4] ), 
    .Q1(un9lto4), .FCO(\cnt_c_cry[4] ));
  SLICE_23 SLICE_23( .B1(\cnt_c[2] ), .A1(cnt_c), .B0(cnt_c), .A0(\cnt_c[1] ), 
    .DI1(\cnt_c_s[2] ), .DI0(\cnt_c_s[1] ), .CE(un1_cnt_alto21), .CLK(w_clk), 
    .FCI(\cnt_c_cry[0] ), .F0(\cnt_c_s[1] ), .Q0(\cnt_c[1] ), 
    .F1(\cnt_c_s[2] ), .Q1(\cnt_c[2] ), .FCO(\cnt_c_cry[2] ));
  SLICE_24 SLICE_24( .D1(un1_cnt_alto21), .A1(un1_cnt_a_1_cry_5_0_S1), 
    .D0(un1_cnt_alto21), .A0(un1_cnt_a_1_cry_3_0_S1), .DI1(\cnt_a_3[6] ), 
    .DI0(\cnt_a_3[4] ), .CLK(w_clk), .F0(\cnt_a_3[4] ), .Q0(\cnt_a[4] ), 
    .F1(\cnt_a_3[6] ), .Q1(\cnt_a[6] ));
  SLICE_25 SLICE_25( .D1(un1_cnt_alto21), .B1(un1_cnt_a_1_cry_9_0_S1), 
    .D0(un1_cnt_alto21), .A0(un1_cnt_a_1_cry_7_0_S0), .DI1(\cnt_a_3[10] ), 
    .DI0(\cnt_a_3[7] ), .CLK(w_clk), .F0(\cnt_a_3[7] ), .Q0(\cnt_a[7] ), 
    .F1(\cnt_a_3[10] ), .Q1(\cnt_a[10] ));
  SLICE_26 SLICE_26( .D1(un1_cnt_alto21), .C1(un1_cnt_a_1_cry_11_0_S1), 
    .D0(un1_cnt_alto21), .B0(un1_cnt_a_1_cry_11_0_S0), .DI1(\cnt_a_3[12] ), 
    .DI0(\cnt_a_3[11] ), .CLK(w_clk), .F0(\cnt_a_3[11] ), .Q0(\cnt_a[11] ), 
    .F1(\cnt_a_3[12] ), .Q1(\cnt_a[12] ));
  SLICE_27 SLICE_27( .B1(un1_cnt_alto21), .A1(un1_cnt_a_1_cry_15_0_S0), 
    .C0(un1_cnt_a_1_cry_13_0_S1), .B0(un1_cnt_alto21), .DI1(\cnt_a_3[15] ), 
    .DI0(\cnt_a_3[14] ), .CLK(w_clk), .F0(\cnt_a_3[14] ), .Q0(\cnt_a[14] ), 
    .F1(\cnt_a_3[15] ), .Q1(\cnt_a[15] ));
  SLICE_28 SLICE_28( .D1(un1_cnt_alto21), .C1(un1_cnt_a_1_cry_19_0_S1), 
    .D0(un1_cnt_alto21), .B0(un1_cnt_a_1_cry_17_0_S0), .DI1(\cnt_a_3[20] ), 
    .DI0(\cnt_a_3[17] ), .CLK(w_clk), .F0(\cnt_a_3[17] ), .Q0(\cnt_a[17] ), 
    .F1(\cnt_a_3[20] ), .Q1(\cnt_a[20] ));
  SLICE_29 SLICE_29( .D1(un9lto7), .C1(un9lto6), .D0(un1_cnt_alto21), 
    .A0(un1_cnt_a_1_s_21_0_S0), .DI0(\cnt_a_3[21] ), .CLK(w_clk), 
    .F0(\cnt_a_3[21] ), .Q0(\cnt_a[21] ), .F1(un1_cnt_clto7_0));
  SLICE_30 SLICE_30( .D1(un8lto9), .C1(un8lto8), .B1(un8lto7_3), 
    .A1(un8lto7_2), .D0(\cnt_a[10] ), .C0(un8lto21_8), .B0(un8lt11), 
    .A0(\cnt_a[11] ), .DI0(un8_i), .CLK(w_clk), .F0(un8_i), .Q0(out_sw1_sig_c), 
    .F1(un8lt11));
  SLICE_31 SLICE_31( .D1(un9lto10), .C1(un9lt10), .B1(\cnt_c[11] ), 
    .A1(\cnt_c[12] ), .D0(un9lto21_5), .C0(un9lto21_6), .B0(un9lt21), 
    .DI0(un9_i), .CLK(w_clk), .F0(un9_i), .Q0(out_sw3_sig_c), .F1(un9lt21));
  SLICE_32 SLICE_32( .D1(\cnt_a[6] ), .C1(\cnt_a[7] ), .B1(\cnt_a[3] ), 
    .A1(\cnt_a[4] ), .D0(un1_cnt_alto21), .A0(un1_cnt_a_1_cry_1_0_S0), 
    .DI0(\cnt_a_3[1] ), .CLK(w_clk), .F0(\cnt_a_3[1] ), .Q0(un8lt2), 
    .F1(un8lto7_3));
  SLICE_33 SLICE_33( .D1(\cnt_a[21] ), .C1(un1_cnt_alto21_1), .B1(\cnt_a[20] ), 
    .A1(\cnt_a[19] ), .C0(un1_cnt_alto21), .B0(un1_cnt_a_1_cry_1_0_S1), 
    .DI0(\cnt_a_3[2] ), .CLK(w_clk), .F0(\cnt_a_3[2] ), .Q0(un8lto2), 
    .F1(un1_cnt_alto21));
  SLICE_34 SLICE_34( .D1(un1_cnt_clto19_0), .C1(\cnt_c[21] ), .B1(\cnt_c[20] ), 
    .A1(un1_cnt_clt19), .C0(cnt_c), .B0(un1_cnt_alto21), .F0(cnt_a16_i), 
    .F1(cnt_c));
  SLICE_35 SLICE_35( .D1(\cnt_c[15] ), .B1(\cnt_c[13] ), .A1(\cnt_c[14] ), 
    .D0(un1_cnt_clt15), .C0(un1_cnt_clto15_1), .B0(\cnt_c[17] ), 
    .A0(\cnt_c[16] ), .F0(un1_cnt_clt19), .F1(un1_cnt_clto15_1));
  SLICE_36 SLICE_36( .D1(\cnt_a[16] ), .C1(un1_cnt_alt16), .B1(\cnt_a[17] ), 
    .A1(\cnt_a[18] ), .D0(\cnt_a[13] ), .C0(\cnt_a[15] ), .B0(\cnt_a[14] ), 
    .A0(un1_cnt_alt13), .F0(un1_cnt_alt16), .F1(un1_cnt_alto21_1));
  SLICE_37 SLICE_37( .D1(\cnt_c[15] ), .C1(\cnt_c[13] ), .B1(\cnt_c[14] ), 
    .A1(\cnt_c[16] ), .D0(un9lto21_5), .C0(un9lt21), .B0(un8lto21), 
    .A0(un9lto21_6), .F0(output_ctrl_sig8), .F1(un9lto21_5));
  SLICE_38 SLICE_38( .D1(un1_cnt_clto7_0), .C1(\cnt_c[8] ), .B1(\cnt_c[9] ), 
    .A1(un1_cnt_clt7), .D0(\cnt_c[11] ), .C0(un1_cnt_clt10), .B0(\cnt_c[12] ), 
    .A0(un9lto10), .F0(un1_cnt_clt15), .F1(un1_cnt_clt10));
  SLICE_39 SLICE_39( .D1(\cnt_a[10] ), .B1(\cnt_a[12] ), .A1(\cnt_a[11] ), 
    .D0(un8lto9), .C0(un1_cnt_alto12_1), .B0(un8lto8), .A0(un1_cnt_alt9), 
    .F0(un1_cnt_alt13), .F1(un1_cnt_alto12_1));
  SLICE_40 SLICE_40( .D1(\cnt_a[18] ), .C1(un8lto21_6), .B1(un8lto21_5), 
    .A1(\cnt_a[17] ), .D0(un8lto21_8), .C0(un8lt11), .B0(\cnt_a[11] ), 
    .A0(\cnt_a[10] ), .F0(un8lto21), .F1(un8lto21_8));
  SLICE_41 SLICE_41( .D1(\cnt_a[4] ), .C1(\cnt_a[3] ), .B1(un1_cnt_alt2), 
    .A1(un8lto2), .D0(\cnt_a[7] ), .C0(un1_cnt_alt5), .B0(\cnt_a[5] ), 
    .A0(\cnt_a[6] ), .F0(un1_cnt_alt9), .F1(un1_cnt_alt5));
  SLICE_42 SLICE_42( .D1(un9lt4), .C1(un9lto5), .B1(un9lto4), .A1(un9lto6), 
    .D0(un9lto7), .C0(\cnt_c[8] ), .B0(\cnt_c[9] ), .A0(un9lt7), .F0(un9lt10), 
    .F1(un9lt7));
  SLICE_43 SLICE_43( .D1(\cnt_c[1] ), .B1(\cnt_c[2] ), .A1(\cnt_c[0] ), 
    .D0(un9lto4), .C0(un1_cnt_clt4), .B0(un9lto5), .A0(un9lt4), 
    .F0(un1_cnt_clt7), .F1(un1_cnt_clt4));
  SLICE_44 SLICE_44( .D1(\cnt_c[20] ), .A1(\cnt_c[21] ), .D0(\cnt_c[19] ), 
    .C0(\cnt_c[18] ), .B0(\cnt_c[17] ), .A0(un9lto21_0), .F0(un9lto21_6), 
    .F1(un9lto21_0));
  SLICE_45 SLICE_45( .C1(un8lto0), .A1(un8lt2), .D0(\cnt_a[5] ), .C0(un8lto2), 
    .A0(un8lt2), .F0(un8lto7_2), .F1(un1_cnt_alt2));
  SLICE_46 SLICE_46( .D1(\cnt_a[12] ), .C1(\cnt_a[21] ), .B1(\cnt_a[19] ), 
    .A1(\cnt_a[20] ), .D0(\cnt_a[13] ), .C0(\cnt_a[14] ), .B0(\cnt_a[15] ), 
    .A0(\cnt_a[16] ), .F0(un8lto21_6), .F1(un8lto21_5));
  SLICE_47 SLICE_47( .D0(\cnt_c[18] ), .A0(\cnt_c[19] ), .F0(un1_cnt_clto19_0));
  out_sw1_sig out_sw1_sig_I( .PADDO(out_sw1_sig_c), .out_sw1_sig(out_sw1_sig));
  i_rst_n i_rst_n_I( .PADDI(i_rst_n_c), .i_rst_n(i_rst_n));
  output_ctrl_sig output_ctrl_sig_I( .IOLDO(output_ctrl_sig_c), 
    .output_ctrl_sig(output_ctrl_sig));
  output_ctrl_sig_MGIOL output_ctrl_sig_MGIOL( .IOLDO(output_ctrl_sig_c), 
    .OPOS(output_ctrl_sig8), .CE(i_rst_n_c), .CLK(w_clk));
  out_sw4_sig out_sw4_sig_I( .PADDO(out_sw3_sig_c), .out_sw4_sig(out_sw4_sig));
  out_sw3_sig out_sw3_sig_I( .PADDO(out_sw3_sig_c), .out_sw3_sig(out_sw3_sig));
  out_sw2_sig out_sw2_sig_I( .PADDO(out_sw1_sig_c), .out_sw2_sig(out_sw2_sig));
  internal_osc internal_osc( .OSC(w_clk));
  GSR_INST GSR_INST( .GSRNET(i_rst_n_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input B1, A1, B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \cnt_c[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \cnt_c_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_1 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20001 un1_cnt_a_1_s_21_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input B1, A0, DI0, CLK, FCI, output F0, Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \cnt_a[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 un1_cnt_a_1_cry_19_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h500C;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_3 ( input A1, A0, DI1, CLK, FCI, output F0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \cnt_a[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20001 un1_cnt_a_1_cry_17_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_4 ( input A1, A0, DI1, CLK, FCI, output F0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \cnt_a[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20001 un1_cnt_a_1_cry_15_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_5 ( input B1, A0, DI0, CLK, FCI, output F0, Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \cnt_a[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 un1_cnt_a_1_cry_13_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_6 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20002 un1_cnt_a_1_cry_11_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_7 ( input B1, A0, DI0, CLK, FCI, output F0, Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \cnt_a[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 un1_cnt_a_1_cry_9_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_8 ( input A1, A0, DI1, CLK, FCI, output F0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \cnt_a[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20001 un1_cnt_a_1_cry_7_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_9 ( input A1, A0, DI0, CLK, FCI, output F0, Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \cnt_a[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20001 un1_cnt_a_1_cry_5_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_10 ( input B1, A0, DI0, CLK, FCI, output F0, Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \cnt_a[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 un1_cnt_a_1_cry_3_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_11 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20003 un1_cnt_a_1_cry_1_0( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500C;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_12 ( input A1, A0, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \cnt_a[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 un1_cnt_a_1_cry_0_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \cnt_c[21] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \cnt_c_s_0[21] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_14 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[19] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \cnt_c_cry_0[19] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_15 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[18] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \cnt_c_cry_0[17] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \cnt_c_cry_0[15] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \cnt_c_cry_0[13] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_18 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20006 \cnt_c_cry_0[11] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00D;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_19 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20007 \cnt_c_cry_0[9] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00D;
  defparam inst1.INIT1 = 16'hF00D;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_20 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \cnt_c_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_21 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20008 \cnt_c_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF00D;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_22 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20008 \cnt_c_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \cnt_c[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_c[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \cnt_c_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00B;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_24 ( input D1, A1, D0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \cnt_a_3[6] ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \cnt_a_3[4] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \cnt_a[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cnt_a[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_25 ( input D1, B1, D0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40010 \cnt_a_3[10] ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \cnt_a_3[7] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \cnt_a[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cnt_a[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_26 ( input D1, C1, D0, B0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40011 \cnt_a_3[12] ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \cnt_a_3[11] ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \cnt_a[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cnt_a[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_27 ( input B1, A1, C0, B0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40012 \cnt_a_3[15] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40013 \cnt_a_3[14] ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \cnt_a[15] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cnt_a[14] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_28 ( input D1, C1, D0, B0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40011 \cnt_a_3[20] ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \cnt_a_3[17] ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \cnt_a[20] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cnt_a[17] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_29 ( input D1, C1, D0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40014 un1_cnt_clto7_0( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \cnt_a_3[21] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \cnt_a[21] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_30 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40015 un8lto9( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 out_sw1_sig_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre out_sw1_sig( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFE0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h070F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_31 ( input D1, C1, B1, A1, D0, C0, B0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40017 un9lto12( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 out_sw4_sig_RNO( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre out_sw4_sig( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_32 ( input D1, C1, B1, A1, D0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40019 un8lto7_3( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \cnt_a_3[1] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_a[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_33 ( input D1, C1, B1, A1, C0, B0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40020 un1_cnt_alto21( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40021 \cnt_a_3[2] ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cnt_a[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h73FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_34 ( input D1, C1, B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40022 un1_cnt_clto21( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40023 un1_cnt_a_1_cry_0_0_RNO( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBF3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_35 ( input D1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 un1_cnt_clto15_1( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 un1_cnt_clto17( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7773) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_36 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40026 un1_cnt_alto21_1( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40027 un1_cnt_alto15( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1151) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3FBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_37 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40028 un9lto21_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40029 output_ctrl_sig8( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3337) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_38 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40030 un1_cnt_clto9( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40031 un1_cnt_clto12( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBF3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1033) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_39 ( input D1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40032 un1_cnt_alto12_1( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40033 un1_cnt_alto12( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_40 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40034 un8lto21_8( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40035 un8lto21( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_41 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40036 un1_cnt_alto4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 un1_cnt_alto7( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0DFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h75FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_42 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 un9lto6( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 un9lto9( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_43 ( input D1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40040 un1_cnt_clto2( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 un1_cnt_clto5( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3373) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_44 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40042 un9lto21_0( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40043 un9lto21_6( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_45 ( input C1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40044 un1_cnt_alto1( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 un8lto7_2( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_46 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40046 un8lto21_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40047 un8lto21_6( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_47 ( input D0, A0, output F0 );
  wire   GNDI;

  lut40048 un1_cnt_clto19_0( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module out_sw1_sig ( input PADDO, output out_sw1_sig );

  xo2iobuf out_sw1_sig_pad( .I(PADDO), .PAD(out_sw1_sig));

  specify
    (PADDO => out_sw1_sig) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module i_rst_n ( output PADDI, input i_rst_n );

  xo2iobuf0049 i_rst_n_pad( .Z(PADDI), .PAD(i_rst_n));

  specify
    (i_rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rst_n, 0:0:0);
    $width (negedge i_rst_n, 0:0:0);
  endspecify

endmodule

module xo2iobuf0049 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module output_ctrl_sig ( input IOLDO, output output_ctrl_sig );

  xo2iobuf output_ctrl_sig_pad( .I(IOLDO), .PAD(output_ctrl_sig));

  specify
    (IOLDO => output_ctrl_sig) = (0:0:0,0:0:0);
  endspecify

endmodule

module output_ctrl_sig_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre output_ctrl_sig_0io( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module out_sw4_sig ( input PADDO, output out_sw4_sig );

  xo2iobuf out_sw4_sig_pad( .I(PADDO), .PAD(out_sw4_sig));

  specify
    (PADDO => out_sw4_sig) = (0:0:0,0:0:0);
  endspecify

endmodule

module out_sw3_sig ( input PADDO, output out_sw3_sig );

  xo2iobuf out_sw3_sig_pad( .I(PADDO), .PAD(out_sw3_sig));

  specify
    (PADDO => out_sw3_sig) = (0:0:0,0:0:0);
  endspecify

endmodule

module out_sw2_sig ( input PADDO, output out_sw2_sig );

  xo2iobuf out_sw2_sig_pad( .I(PADDO), .PAD(out_sw2_sig));

  specify
    (PADDO => out_sw2_sig) = (0:0:0,0:0:0);
  endspecify

endmodule

module internal_osc ( output OSC );
  wire   GNDI;

  OSCH_B internal_osc_OSCH( .STDBY(GNDI), .OSC(OSC), .SEDSTDBY());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module OSCH_B ( input STDBY, output OSC, SEDSTDBY );

  OSCH INST10( .STDBY(STDBY), .OSC(OSC), .SEDSTDBY(SEDSTDBY));
  defparam INST10.NOM_FREQ = "3.33";
endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
